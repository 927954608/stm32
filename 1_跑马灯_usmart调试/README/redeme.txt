Init: 初始化initialize
RCC： 复位和时钟控制Reset and Clock Control
Periph、PERIPH：  外设Peripherals
Cmd:使能
NVIC： 即嵌套向量中断控制器Nested Vectored Interrupt Controller
Config： 配置Configuration
IT： 中断Interrupt
AFIO：Alternate-function input/output 复用功能输入/输出
IWDG： 独立看门狗Independent Watchdog
PSC:  预分频器Prescaler
ARR: 自动重装载寄存器（Auto-Reload Register）
CCRx：捕获/比较寄存器（Capture/Compare Register x）
CNT：计数器Counter
OC1：输出比较通道1（Output Compare Channel 1）
CH Channel 通道

//*****************************************GPIO
//void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)//GPIO初始化函数
//void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)//输出1
//void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)//输出0
//void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)//时钟使能，在rcc.c
//外设不同使能函数也不同，具体在rcc.h的497行查看



//*****************************************位操作
//#define PAout(n)   BIT_ADDR(GPIOA_ODR_Addr,n)  //输出 
//#define PAin(n)    BIT_ADDR(GPIOA_IDR_Addr,n)  //输入
//引用头文件sys.h就可以使用PXout(n)和PXin(n)进行位操作



//*****************************************端口复用（Default）、重映射（Remap）
//打卡数据手册STM32F103ZET6 可具体查看
//Default:当GPIO引脚被配置为复用模式时，它就不再仅仅是一个简单的输入输出引脚，而是能够执行更为复杂的数据传输或控制任务。
//Remap:用户通过软件配置将某些内置外设的复用功能引脚从默认的物理引脚重新映射到其他可用的GPIO引脚上。
//端口复用配置过程：端口和复用外设分别使能、GPIO初始化（参数见中文参考手册8.1.11）




//*****************************************中断
STM32的中断优先级分组通过配置NVIC的优先级寄存器来实现。NVIC的优先级寄存器（如NVIC_IPRx）通
常包含4位，这4位可以根据需要进行分组，分配给抢占优先级和响应优先级。STM32提供了5种不同的分
组方式（从NVIC_PriorityGroup_0到NVIC_PriorityGroup_4），每种分组方式决定了抢占优先级和响应
优先级各自占用的位数。
//void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)//中断优先级分组
//组可分为0~4,一共5个组
//void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)//中断参数初始化函数
//这两个函数在misc.c中，必须先main中断优先级分组




//*****************************************串行通信
通信:串行通信、并行通信
串行通信按照数据的传出送方向：单工、半双工、全双工
串行通信得通信方式：同步通信，有时钟信号，例如SPI、IIC；异步通信，无时钟线，有波特率，例如UART（异步收发器）
UART是全双工异步通信，引脚有TXD、RXD、GND
SPI是全双工同步通信，引脚有SCK、MISO、MOSI
IIC是半双工同步通信，引脚有SCL、SDA
STM32F1有5个UART串口，每个串口对应引脚在STMF103ZET6中查看
串口时钟PCLK1用于给串口UART2、3、4、5，PCLK2用于UART1
波特率=串口时钟/（16*USARTDIV）


《串口配置的一般步骤》（注意正点原子的usart有初始化函数，中断函数，自己编写是应该去掉）
1、串口、GPIO时钟使能void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
   GPIO端口和串口是两个独立的外设模块，为了使它们能够协同工作，需要分别使能它们的时钟。

2、GPIO端口、串口初始化void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct);
                      void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct);
					  GPIO的模式设置查看中文参考手册
					  
4、使能串口void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState);

3、若需要中断开启中断，则需要设置中断优先级分组
   void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);//中断优先级分组，在中断调用之前
   void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)/使能相关中断
   void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);//中断初始化
   void USARTx_IRQHandler(void);//编写中断服务函数，注意各种中断函数名在启动文件中
   在中断服务例程中，通常需要通过读取USART的状态寄存器（如USART_SR）来判断是哪个中断事件触发了中断，并根据中断类型执行相应的处理逻辑。
   处理完中断后，还需要清除相应的中断标志位，以避免中断服务例程被重复调用。
   ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);//状态寄存器

5、串口数据收发
   uint16_t USART_ReceiveData(USART_TypeDef* USARTx);//收
   void USART_SendData(USART_TypeDef* USARTx, uint16_t Data);//发
   
6、串口传输状态获取
   void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
   FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);



//*****************************************外部中断
每个IO都可以作为外部中断输入，支持19个外部中断请求，线0~15：对应外部IO口的输入中断，线16~18百度查看
GPIOx.0映射到EXTI0,x:A~G,即每个中断线可对应很多IO口，但在同一时间只能映射一个
16个中断线分配7个中断向量，只能使用7个中断服务函数，中断线0~4个各对应一个，中断线5~9和10~15分别共用一个
《外部中断配置的一般步骤》
1、GPIO使能与复用void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2、GPIO初始化void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct);
3、设置IO与中断线的映射关系void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource);
4、中断线初始化void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct);
5、中断分组，并使能中断
   void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);//中断优先级分组，在中断调用之前
   void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);//中断初始化，中断通道在stm32f10x.h查找
6、编写中断服务程序、清除标志位
   void EXTI4_IRQHandler(void)//改函数名在启动文件中找
   void EXTI_ClearITPendingBit(uint32_t EXTI_Line);//中断返回时要清除标志位
   


//*****************************************独立看门狗
看门狗解决的问题：启动正常运行时，不能复位，程序跑飞异常时，系统复位，程序重新执行
《独立看门狗操作步骤》
1、取消寄存器写保护void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess);
2、设置独立看门狗的预分频系数、确定时钟
3、设置看门狗重装载值，确定溢出时间
4、使能看门狗
5、应用程序喂狗



//*****************************************通用定时器
最多有8个定时器，包括高级定时器TIM1 TIM8、通用定时器TIM2~TIM5、基本定时器TIM6 TIM7
自动装载寄存器TIMx_ARR、计数器TIMx_CNT、预分频器TIM_PSC
4个独立通道（TIM_CH1~4）,可以用来输入捕获 输出比较 PWM生成 单脉冲模式输出
事件发生时产生中断/DMA（6个独立的IRQ/DMA请求发生器）
常用于 测量输入信号的脉冲宽度（输入捕获）、产生输出波形（PWM、输出比较）
计数模式
1、向上计数：从0计数到自动加载值（TIMx_ARR），重新计数并产生一个计数器溢出中断
2、向下计数：从自动加载值（TIMx_ARR）计数到0，重新计数并产生一个计数器溢出中断
3、中央对齐：
时钟源：1、内部时钟APB1总线       2、外部时钟TIMx_ETR（针对TIM2~4）      3、定时器级联ITR0~3 
默认调用Systemlinit函数下：SYSCLK=72M，AHB时钟=72M，APB1时钟=36M，所以APB1的预分频系数=AHB/APB1=2
所以，通用定时器时钟CK_INT=2*36M=72M
Tout=(ARR+1)(PSC+1)/Fclk,设置PSC=7199（最大65536），这个计数器+1，需要0.1ms

《定时器中断步骤》
1、使能定时器时钟
   void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState);
   
2、初始化定时器，配置ARR，PSC 
   void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);
   
3、开启定时器中断，配置NIVC 
   void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState);//在tim.找
   void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);//中断优先级分组，在中断调用之前
   void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);//中断初始化，中断通道在stm32f10x.h查找
   
4、使能定时器
   void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
   
5、编写中断服务函数
   TIM3_IRQHandler在启动文件找到中断服务函数名后编写中断服务函数
   ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
   void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT);



//*****************************************PWM：脉冲宽度调制
ARR：重装载值
CCR：捕获比较寄存器，可以不断改变比较值，从而改变占空比
PWM有两种模式 模式一：TIMx_CNT<CCRx时有效;模式二：TIMx_CNT>CCRx时有效
CCER：CC1P 极性
CCER：CC1E 使能
TIMx的输出通道TIMx_CH1~4引脚可以在数据手册中查看,有没有重映射，重映射
TIM3_CH1:PA6
TIM3_CH2:PA7
TIM3_CH3:PB0
TIM3_CH4:PB1

《PWM的一般过程》
//要求使用定时器3，并将定时器3的2通道（TIM3_CH2）部分重映射到PB5
重映射要复用，还要调用GPIO_PinRemapConfig
1、//时钟使能
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);//使能定时器时钟
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO,ENABLE);//使能GPIO与AFIO复用
	
2、GPIO初始化
   GPIO_Init(GPIOB,&GPIO_InitStr);
   
3、	//定时器重映射到PB5
	GPIO_PinRemapConfig(GPIO_PartialRemap_TIM3,ENABLE);
	
4、//初始化定时器
   TIM_TimeBaseInit(TIM3,&TIM_TimeBaseInitStr);
   
5、	//TIM_CH2参数
	TIM_OCInitStr.TIM_OCMode = TIM_OCMode_PWM2;
	TIM_OCInitStr.TIM_OCNPolarity =TIM_OCPolarity_High;
	TIM_OCInitStr.TIM_OutputState =TIM_OutputState_Enable;
	TIM_OC2Init(TIM3,&TIM_OCInitStr);
	
6、	//使能输出比较预装载
  TIM_OC2PreloadConfig(TIM3,TIM_OCPreload_Enable);
	
7、	//使能定时器3
	TIM_Cmd(TIM3,ENABLE);

8、改变重装载值
   TIM_SetCompare2(TIM3,pwm_arr);
   TIM_ITConfig



//*****************************************输入捕获
作用：捕获高电平的时间等
过程：捕获TIMx_CHx的的边沿信号，在跳变时，将定时器的值TIMx_CNT存入到对应的
捕获寄存器TIMx_CCRx里面
1、设置输入捕获滤波器：影响采样次数，如采样8次都是高电平则认为是一个有效触发
2、设置输入捕获极性：上升沿OR下降沿
3、设置输入捕获映射通道
4、设置输入捕获分频器：几次上升沿OR下降沿，将计数器的值捕获到捕获寄存器
5、捕获有效信号发起中断

通道与引脚对应查看手册
1、使能定时器 和对应GPIO
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
      RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);

2、初始化GPIO
     GPIO_Init(GPIOA,&GPIO_InitStr);//下拉输入

3、初始化定时器
      计数方式、分频系数、重装载值、预分频系数
     TIM_TimeBaseInit(TIM5,&TIM_TimeBaseInitStr);

4、初始化捕获通道
     通道、捕获极性、映射关系、分频系数、滤波器
     TIM_ICInit(TIM5,&TIM_ICInitStr);

5、中断初始化
      捕获成功中断、溢出中断
      通道（何种中断）、优先级、使能
      NVIC_Init(&NVIC_InitStr);

6、定时器中断配置
     哪个定时器 什么事件发生中断
     TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)

7、定时器使能
     TIM_Cmd(TIM5,ENABLE);

8、中断函数
void TIM5_IRQHandler(void)
{
    if((TIM5CH1_CAPTURE_STA&0X80)==0)//还未成功捕获
  {
      if (TIM_GetITStatus(TIM5, TIM_IT_Update) != RESET)//定时器溢出
         {
      
        }

     if (TIM_GetITStatus(TIM5, TIM_IT_CC1) != RESET)//捕获发生
           {

                  if(TIM5CH1_CAPTURE_STA&0X40)//之前是高电平，说明这次中断捕获到一个下降沿
                        {

                         }
         }
     else//否则之前是低电平，说明这次捕获是上升沿
           {
             
            }
   }
    TIM_ClearITPendingBit(TIM5, TIM_IT_CC1|TIM_IT_Update); //清除中断标志位
}
	


//*****************************************触摸按键
原理RC电路，在触摸时给电容并联一个电容，电容值变大，充电时间变长
当按键没有按下时，充电时间为T1，按下时，充电时间为T2，当T2-T1大于某个值认为按键按下





